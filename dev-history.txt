회의 ID: 210 854 0132
비밀번호: 883045
※ 2025.03.04 ~>
==========================================================
서블릿기반의 MVC 토이프로젝트 (가칭 : talkhub)
 - 회원제 기반의 간단한 커뮤니티 서비스
 - WAS는 tomcat를 활용
 - 데이터베이스는 aws를 활용 (mysql)
 - 버전관리는 git을 활용
 - 개발기간 : 4일(25.03.04 ~ 07 )
==========================================================
주요 기능
 - 회원가입 / 로그인 / 로그아웃 / 마이페이지 /회원탈퇴

 - 게시글쓰기 / 목록 / 상세보기 / 수정 / 삭제

 - 댓글 달기 / 댓글 삭제
==========================================================

# AWS RDS 세팅 #
  database.ch662qumapvg.ap-northeast-2.rds.amazonaws.com

==========================================================

# Jakarta EE 프로젝트 생성 ##
프로젝트네임 : talkhub   (git 저장소 생성 이거 체크 : git init 된 상태에서 프로젝트 생성됨.)
템플릿 : 웹 어플리케이션

▶ 생성이후 프로젝트 청소
  HelloServlet 지우고, index.jsp 지우고,  pom.xml 에 라이브러리 추가 ( mysql connetor library, jstl library )

▶ 최초 커밋용 헬스 체크 하고 그 다음에 commit
  : controller 패키지 추가해서 HomeServlet 만들어서 "/index" 에 매핑
    → /WEB-INF/views/index.jsp 로 뷰 처리되게 포워드 → 뷰 파일 만들어서 적절하게 HTML 출력
  : /WEB-INF/web.xml 에 welcome-file 등록

▶ 커밋 후 브랜치 생성 (feature/user-signup)

==========================================================
## 회원 정보 저장할 table 생성
workbench 로 aws rds 에 접속해서 이 프로젝트용 database 생성 (talkhub)

생성된 database 에 table 생성
create table users (
  id varchar(60) primary key,
  password varchar(90) not null ,
  nickname varchar(90) not null unique,
  gender enum('남', '여', '비공개') not null,
  birth int not null,
  created_at datetime not null
);

insert into users values('master', '1q2w3e4r', '마스터', '비공개', 2025, now() );

====================================================================================
## users 테이블에 관련된 작업을 모델 객체 설계
  - VO(Value Object) 객체 , DTO (Data transfer Object) 객체 : 데이터베이스에서 가지고 왓을때 옮겨담을용도의 객체
  - DAO (Data Access ObjecT) 객체, Repository 객체 : 데이터베이스와의 작업을 담당하는 용도의 객체

▶ VO(DTO) 객체는 DB Table을 참조해서 데이터를 옮겨닮을 수 있는 구조로 설계
  (주의 : 테이블의 컬럼에 스네이크 표기 적용된 부분은 vo 설계시 카멜로 변경해서 작명
         varchar==>String, int ==> int, datetime ==> java.util.Date  )

▶ DAO 객체는 기본적인 CRUD를 할수 있게 설계
  (insert 작업만 선 구현 )

======================================================================================

## 엔드포인트 설정 ##
▶ 회원가입 서비스 구축

  /user/join  (....user.JoinServlet)
     : 회원가입에 필요한 정보를 입력할 수 있는 폼을 보여주는 경로
     : /WEB-INF/views/user/join.jsp 에서 View 처리를 함

  /user/join-proceed  (....user.JoinProceedServlet)
     : form 으로부터 전달 받은 데이터를 유효성 검증 및 필요한 작업을 한 이후 Database에 인서트처리를 할 경로

     = 미션!! 개발영역 (~	3:35) ===================================================================
     = /join.jsp 의 form 이 미완성 상태임. (action 설정도 안되있고, 파라미터 name 설정도 안되있음)		=
     = form 을 마저 완성해서,  JoinProceedServlet으로 요청이 연계되고 작성해주시고,			=
     = 실제 JoinProceedServlet은 데이터 받아서 DB insert 작업이 일어날 수 있게 구현 .			=
     =    insert 실패시는 /WEB-INF/views/user/join-fail.jsp 로 View 처리되게 연동			=
     =           성공시에는 /index 로 리다이렉트 설정      						=
     = ※ 참고 (pokemon 프로젝트에서 Create , CreateProceedServlet 패턴 참고 )			=
     ============================================================================================


=================================================================================================
▶ 회원로그인 서비스 구축
  예전 포켓몬 프로젝트에서는 인증절차를 사용자가 비밀번호를 보내고, 보낸값이 서버에 설정된 비밀번호(P@ssw0rd)와 일치하면
  인증을 시켜주었다. 이 인증정보를 유지하기 위해서 쿠키를 활용했었다.

  이번 프로젝트에서는 인증을 받고 하는 사용자는 자신의 id와 비밀번호를 보내주고 , 이정보가 유효한 경우에 인증처리 해주고,
  인증정보 유지하기 위해서 이번에는 세션을 활용해보려고 한다.

 ----------------------------------------------------------------------------------------------

 + UserDAO 모델에 기능 추가.
   User findById(String specificId)
       "select * from user where id=?" / PokemonDBUtil 의 selectByCode 메서드 참고

 ----------------------------------------------------------------------------------------------
## 엔드포인트 설정 ##
  ※ 유저 로그인 관련 서블릿

  /user/login-proceed  (...user.LoginProceedServlet )
   → 인증에 필요한 정보인 id와 password를 파라미터로 받고, 이 id에 해당하는 정보를 DB에서 불러올 계획임.
     (조금전에 만든 findById 메서드를 이용해서). → if else 처리해서 불러왓을때와 그렇지 않을때를 나눠야 함.
   → 못찾았다면, id에 해당하는 정보가 없으니까 그에 상응한 응답을 보내주면 될것 같고, 데이터를 불러왔다면,
   그 user 객체가 가지고 있는 password (database의 정보를 토대로 설정됬을꺼임) 와 사용자가 보낸 파람이랑 비교 →
   일치하면 인증성공, 일치하지 않으면 비밀번호 오류

   --> 성공시에는 /index 서블릿으로 사용자를 보낼꺼고, 그게 아닌경우에 JSP로보내서 view 를 만들어서 전송

     = 미션!! 개발영역 =====================================================================
     = 사용자 인증을 받기위해 /user/login-proceed 로 직접 파라미터를 설정해서 보내고 있다.		=
     = /user/login 에 LoginServlet 매핑 걸어서 해당 경로에서는  				=
     = 로그인에 필요한 정보를 입력하여 /user/login-proceed 로 제출되게 form 을 제공하라. 		=
     = (action 설정, name 설정 신경쓸 것)							=
     ====================================================================================

※ 2025.03.05 ~>
----------------------------------------------------------------------------------------------
 # 코드 리팩토링 #
 --> DB 연동작업을 하려면 Connection 객체가 필요한데, 모든 메서드안에서 직접 연결을 잡다보니, 일일이 수정을 해야
  하는 번거러움이 있음. 그래서, 연결부분만 따로 메서드로 만들꺼임
 --> util.ConnectionFactory  클래스 생성 .  open() 메서드 만들어서 Connection 리턴되게 설계
 --> UserDAO 의 findById, create 메서드에 연결잡는 부분을 이 메서드를 호출하는 방식으로 수정
   (혹시 모르니 기작동되던 서비스가 정상 작동하는지 다시 한번 체크 , 가입, 인증 두개)
 --> 확인완료 후 커밋 refactor : DB연결 모듈화
----------------------------------------------------------------------------------------------
 # 인증값 유지 #
 --> 인증유무에 따른 view 에 변화를 줄 거임. /index.jsp 에  메뉴를 만들었음
 --> HomeServlet 에서 random() 으로 authentication 을 true, false 로 설정
 --> /index.jsp 에 choose, when 태그 써서 authenticatino 값에 따라 view가 다르게 만들어지게 구현

 ?? 이걸 랜덤으로 설정하는게 맞는가 ??
 ==> 실제 로그인 인증 했을때 그 결과에 영향을 받게 수정을 해야된다.
 --> 쿠키를 이용하는 방식과 세션을 이용하는 방식을 둘다 시도해볼꺼기 때문에 현재까지 작업내용을 커밋
    브랜치를 feature/login-cookie  는 쿠키 방식으로 해결 (자발적인 숙제)
    브랜치를 feature/login-session 은 세션 방식으로 해결
===============================================================================================
세션??
 ->사용자(브라우저)가 웹서버에 접속하게 됬을때 서버가 사용자마다 개별 저장공간을 할당한다.
 이 공간을 세션이라고 부른다.
 -> 세션은 최초접속시 만들어지고 최대 30분간 요청이 오지 않더라도 유지(기본설정)가 되게 되있다.
 -> 30분이내에 재요청이 들어오면 다시 리셋이 됨 30분으로
 -> 요청자의 세션은 req.getSession() 으로 얻을수 있다.
 -> session 에 저장은 setAttribute , 값확인은 getAttribute , 값제거는 removeAttribute
 -> 이거 외에도 getId(), isNew(), getCreationTime(),
    getLastAccessedTime(): 마지막억세스타임 : 지금요청 바로 직전의 시간
===============================================================================================
## 인증작업 변경 ##
  LoginProceedServlet
   : 인증성공시 요청자 세션에 인증했다는 정보를 save
   : session.setAttribute("user", found);
  -> 이렇게 해두었다고 가정시, 인증받은 사용자인지 아닌지를 어떻게 확인?
     요청자 세션에 user 라고 저장된 값이 있는지 없는지를 판단하면 됨.
  HomeServlet
    랜덤으로 authentication 설정하던 부분을 변경
    if(Math.random() >0.5) {
    ==>
    if(session.getAttribute("user") != null) {

   = 미션!! 개발영역 =======================================================================
   = 로그아웃 기능을 만들어라!!                                               		=
   = 인증받은 사용자인지 아닌지 구분의 기준의 먼지 생각해보자 ?          				=
   = 이미 인증을 받은 사용자를 인증안받은 사용자로 바꾸려면 어떻게 하면 됨?                          =
   = 위 작업을 LogoutProceedServlet 만들어서 거기서 구현하고 mapping을  /user/logout-proceed 으로 설정   =
   = /index.jsp 에 가보면 로그아웃 이란 글씨에 a 를 잡아두긴 했는데 href 설정이 안되있음.
   = href 설정을 위 매핑잡은 경로로 설정
   = 완료되면 커밋. >> master 브랜치로 체크아웃,  feature/login-session 브랜치 우클릭 이후 병합
   ======================================================================================

## 에러 처리 ##
 로그인, 회원가입 중에 문제가 발생했을때 view로 forward 는 잡아두었지만 아직 미구현 상태
 이부분을 수정해보려고 함.

 >> fix/error-page 브랜치 (master 에서)
   : /WEB-INF/views/user/login-fail.jsp <---

   : /WEB-INF/views/user/join-fail.jsp   <---
           가입 실패를 했을 때 위 jsp에서 view를 처리할껀데, 저 파일 자체가 없어서 error가 뜨고 있을꺼임.
          위 파일을 만들어서 view 파일을 못찾는 상황은 해결하시고,
          회원가입실패일때 사용자에게 실패원인을 좀 알려줄 HTML 을 전송하라.
     (간단하게 할사람은 디비 등록실패했다고 알려주고, 좀 그럴싸 하게 만들 사람은 join.jsp 복사해서
     login-fail 만들듯이..  실패했을때 JoinProceedServlet에서 error를 설정해주고 그 값을 출력하게 변경)

=========================================================================
※ 2025.03.06 ~>
=========================================================================
  ≫ HTML 의 요소가 가진 block 속성과 inline 속성에 대한 개념 정리
  ≫ css 속성의 하나인 margin, padding 에 대한 개념 정리
  ≫ html에 css 적용하는 법에 대한 정리   (최종버전은 css 파일 분리)
=========================================================================

마이페이지 (개인정보확인하는 곳) 구현    (feature/my-page 브랜치 작업)
  /user/profile 을 endpoint 로 잡는 ProfileServlet 을 추가
  :  인증 안받고 접근시 로그인으로 리다이렉트 .!
  :  인증을 받은 상태라면 현재 인증받은 사용자의 정보를 view 에서 출력할수 있께 req.setAttribute 해서 view로 forward
  :  인증받은 사용자의 정보는 로그인 성공시 세팅을 해두니까 바로 뽑아쓰거나, 아니면 id를 통해서 다시 불러오거나

   = 미션!! 개발영역 =========================================================
   = 미인증시 /user/profile 로 접근하면 /user/login 으로 리다이렉트가 일어난다.                                   	=
   = 이 케이스에서 사용자가 로그인 성공시 다시 /user/profile 로 갈수 있게 하려면? 			=

   = /user/profile 에서  /user/login으로 보낼때 다시 올 곳을 사용자의 세션을 이용해서 저장해두고		=
   = LoginProceed 에서 인증 성공시 다시 올곳이 세션에 세팅된 사용자라면 그곳으로 리다이렉트		=
   = 그렇지 않다면 기본 경로 (/index) 로 리다이렉트						=
   =====================================================================

# 커뮤니티 기능 #
가입한 사용자들이 서로 의견을 공유할 수 있게 게시판 기능을 하나 만드려고 함.

>> 게시판 용 글들을 저장할 테이블 하나 생성

create table posts (
  id int primary key auto_increment,     -- 식별키 (자동증가)
  writer_id varchar(60) , -- 작성자 (유저테이블의 id컬럼에 외래키 설정)
  category varchar(60) not null,  -- 글 종류
  title varchar(300) not null, -- 글제목
  content text not null, -- 글 내용

  views int not null, -- 조회 수
  likes int not null, -- 좋아요 수
  writed_at datetime not null,  -- 작성일
  modified_at datetime not null,  -- 수정일

  foreign key (writer_id) references users(id)
);

insert into posts values(null, 'master', '공지', '필독! 게시판 사용시 주의 사항', '추후 예정입니다', 0, 0, now(), now() );

=========================================================================
   = 미션!! 개발영역  =========================================================
   = feature/new-post
   = 게시판 서비스를 완성하라!.                                 					  	=
   = 구현 목표는 새글 작성, 전체 글 목록   (글 상세보기까지 힘 닿으면..)

    작업순서를 일단 새 테이블이 만들어졌기 때문에 vo, dao 를 만들거 같음  (Post , PostDAO)
    vo는 테이블을 보고 같은 구조로 만들고 (컬럼에 스네이크 표기된건 변수잡을때 카멜 로, 컬럼유형에 맞춰 자료형 선언, text ==> String)

    dao 안에, create 부터 만들거 같음.
    처리할 SQL은  "insert into posts values(null, ? , ? , ? ,  ?,  0, 0, now(), now() )"

    (id는 자동증가되며 부여되기 때문에 null을 설정, 조회수, 추천수는 새글 등록시 0으로 설정할꺼고, 작성일과 수정일도 now() 현재시간 설정
    실질적으로 새 데이터 insert 필요한 정보는 writer_id, category, title, content )



    /post/write   :  작성 폼   (/user/join   ,  /pokemon/create )
    /post/write-proceed :  (/user/join-proceed,   /pokemon/create-proceed )
       넘어온데이터 insert 처리   (post create 를 하려면 값이 4개,
      폼으로 전달받는 값은 category, title, cotent / writer_id 는  session에 현재 인증 사용자 정보가 있기 때문에 그값을 활용)




    여기까지 해서 새 데이터가 들어가는 걸 확인하면  목록을 만들것 같음.

    List<Post> selectAll ()
       "select * from posts order by id desc"   이걸 처리할 메서드를 DAO 에 추가

   /post/list  를 처리할 서블릿을 만들어서
    selectAll 호출해서 List 받아온거 req 세팅해두고,  view 에서 forEach 돌리면서 출력 (목록이니까 간단하게 글 내용은 출력안해도 될듯)

============================================================================================
※ 2025.03.07 ~>

 상세보기를 구현할 힘이 좀 남아있으면 post 상세보기 구현 (포켓몬 정보 상세보기 만들었던거 ReadServlet 참조 해서 상상의 세계로.)
  ① DAO에 id로 post 로 찾는 메서드가 필요.
  ② /post/view 를 처리할 컨트롤러 만들고
     해당 컨트롤러에서는 특정 post id를 파라미터로 받는다고 가정하고 그 id에 해당하는
     post 찾아서 세팅시키고 뷰로 포워드
  ③ 뷰파일 만들어서, 세팅된 데이터 토대로 HTML 출력

 ---------------------------------------------------------------------------------------------------------------------------------------------------------
  +글 목록은 인증안받은상태에서도 확인가능하지만,
    글 상세보기는 인증받은 사용자만 볼수 있게 처리해볼 것. 물론 인증성공했다면 원래 가고자 했던 곳으로 갈수 잇게 처리
============================================================================================

 # 조회수 업데이트, 추천 기능 구현 #
 데이터 변경을 두가지 방법이 있는데,
  "update posts set views = ? where id= ?"   (포스트 아이디와 해당 포스트의 기존뷰값을 알아야 변경가능)
  "update posts set views = views+1 where id=?"  (포스트아이디만 알면 변경가능)


PostDAO 에 이 DB작업을 할 메서드를 만들거임.

 ㅣ조회수 증가는   boolean increaseViewsById(int postId)  이 메서드를 만들어서
                     사용자가 글 보로 들어올때 ( /post/view  ) 호출해주면 됨.

   = 미션!! 개발영역  ============================================================
   = 추천기능을 만들어라!@!
   = "update posts set likes = likes +1 where id=?" 이 작업을 처리할 메서드를 만드세요.!  (increaseViewsById 랑 99% 비슷)
   = 메서드명은 자기 취향껏 만들면 되겠지만, increaseLikesById 라고 만들 듯..

   = 이걸 어떻게 작동시킬껀지?  (일단 중복은 허용하자. )  / 비슷한 패턴 포켓몬 삭제기능 만든거랑 비슷. )
   = 이 작업을 엔드포인트가 필요 ( /post/like-proceed ) 처리할 서블릿을 만들고
   =  파라미터로 올리고자하는 포스트의 id 가 넘어온다고 가정하고 짤 듯
   = 글 보기화면에서 버튼이나 링크 이용해서 클릭하면 위에 만든 엔드포인트로 해당글 id 물려서 보내면 될듯..)

   ?? 시간 한시간 생기면 고민 한번 해볼문제... 추천하고 왔을때는 조회수가 안올라가게 하려면?
--------------------------------------------------------------------------------------------------------------------------------------------
   중복추천이 가능한데, 이걸 막으려면..? 데이터베이스를 이용해서 해결해야 함.

   create table post_likes (
     id  int primary key auto_increment,
     user_id varchar(60) not null,
     post_id int not null,
     created_at datetime not null,

     foreign key (user_id)  references users(id),
     foreign key (post_id) references posts(id),
     unique (user_id, post_id)
   )

   insert into post_likes values ( null, 'zoro', 4, now() );

  테이블에 대한 DB 작업을 원할하게 하기 위해 VO, DAO 를 만들어야 할거임.
  -> vo 만들기 model.vo.PostLike 라고 만드시면 될듯
  -> DAO 만들기 model.dao.PostLikeDAO 라고 만들면 될 것 같음
------------------------------------------------------------------------------------------------------------------------
 ＊데이터 등록처리할 메서드 만들기 ＊
   insert into post_likes values( null, ?, ?, now () )

   이전까지는  (UserDao 의 create 가 이런식임. Pokemon 도 이랬음)
     public boolean crearte(String userId, int postId) {
   위와 같이  데이터 등록에 필요한 데이터를 다 따로 매개변수로 받는 식으로 구현했었는데

   이번에는  (PostDao 의 create가 이 버전임)
   public boolean create(PostLike one) {
          이렇게 객체를 받아서 필요한 데이터를 추출해서 사용하는 식으로 구현해볼것
------------------------------------------------------------------------------------------------------------------------

  특정유저가 등록한 데이터 가져오기 를 처리할 메서드가 필요
    select * from post_likes where user_id = ? order by created_at desc

   List<PostLike> findByUserId(String userId)    / ( PostDAO 의 findAll() ? 이거랑 비슷 : 유사도 80%)

   위 SQL같은 경우는 while 로 처리해야될 거임. 언제 if 고 언제 while 인가 이 기준을 잘 잡아둬야 함.

------------------------------------------------------------------------------------------------------------------------
  같은 글에 같은 유저가 추천(좋아요)를 못하게 위해 지금까지 준비를 한거임.

   좋아요 등록 처리하는 엔드포인드가? /post/like-proceed에서 작업을 해줘야 함.
           dao.increaseLikesById(id); 를 무조건 호출되게 하면 안됨.

  일단 이 요청을 보낸 유저의 좋아요 목록을 가지고 와야 됨.
  이목록중에 postId 가 지금 파라미터로 넘어온 id가 있는지 확인을 해야됨.


















































































































